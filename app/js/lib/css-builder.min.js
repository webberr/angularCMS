define(["require","./normalize"],function(req,normalize){function compress(css){if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire)try{var csso=require.nodeRequire("csso"),csslen=css.length;return css=csso.justDoIt(css),console.log("Compressed CSS output to "+Math.round(100*(css.length/csslen))+"%."),css}catch(e){return console.log('Compression module not installed. Use "npm install csso -g" to enable.'),css}return console.log("Compression not supported outside of nodejs environments."),css}function loadFile(path){if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire){var fs=require.nodeRequire("fs"),file=fs.readFileSync(path,"utf8");return 0===file.indexOf("ï»¿")?file.substring(1):file}var stringBuffer,line,file=new java.io.File(path),lineSeparator=java.lang.System.getProperty("line.separator"),input=new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file),"utf-8"));try{for(stringBuffer=new java.lang.StringBuffer,line=input.readLine(),line&&line.length()&&65279===line.charAt(0)&&(line=line.substring(1)),stringBuffer.append(line);null!==(line=input.readLine());)stringBuffer.append(lineSeparator).append(line);return""+stringBuffer+""}finally{input.close()}}function saveFile(path,data){if("undefined"!=typeof process&&process.versions&&process.versions.node&&require.nodeRequire){var fs=require.nodeRequire("fs");fs.writeFileSync(path,data,"utf8")}else{var content=new java.lang.String(data),output=new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(path),"utf-8"));try{output.write(content,0,content.length()),output.flush()}finally{output.close()}}}function escape(content){return content.replace(/(["'\\])/g,"\\$1").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r")}var curModule,baseUrl=require.toUrl("."),cssAPI={},loadCSS=function(cssId,parse){var fileUrl=cssId;if(".css"==fileUrl.substr(fileUrl.length-4,4)||parse||(fileUrl+=".css"),fileUrl=req.toUrl(fileUrl),"http://"!=fileUrl.substr(0,7)&&"https://"!=fileUrl.substr(0,8)){var css=loadFile(fileUrl);return parse&&(css=parse(css)),css=normalize(css,fileUrl,baseUrl)}};cssAPI.load=function(name,req,load,config){if(config.modules)for(var i=0;config.modules.length>i;i++)if(void 0===config.modules[i].layer){curModule=i;break}cssAPI.config=cssAPI.config||config,load()},cssAPI.normalize=function(name,normalize){return"!"==name.substr(name.length-1,1)&&(name=name.substr(0,name.length-1)),".css"==name.substr(name.length-4,4)&&(name=name.substr(0,name.length-4)),normalize(name)};var _layerBuffer=[];return cssAPI.write=function(pluginName,moduleName,write,extension,parse){"http://"!=moduleName.substr(0,7)&&"https://"!=moduleName.substr(0,8)&&(_layerBuffer.push(loadCSS(moduleName+(extension?"."+extension:""),parse)),write.asModule(pluginName+"!"+moduleName,"define(function(){})"))},cssAPI.onLayerEnd=function(write,data){var separateCSS=!1;cssAPI.config.separateCSS&&(separateCSS=!0),"number"==typeof curModule&&void 0!==cssAPI.config.modules[curModule].separateCSS&&(separateCSS=cssAPI.config.modules[curModule].separateCSS),curModule=null;var css=_layerBuffer.join("");if(separateCSS){"undefined"!=typeof console&&console.log&&console.log("Writing CSS! file: "+data.name+"\n");var path=this.config.dir?this.config.dir+data.name+".css":cssAPI.config.out.replace(/\.js$/,".css"),output=compress(normalize(css,baseUrl,path));saveFile(path,output)}else{if(""==css)return;css=escape(compress(css));var normalizeParts=req.toUrl("css").substr(baseUrl.length-1).split("/");normalizeParts[normalizeParts.length-1]="normalize";var normalizeName=normalizeParts.join("/");write("for (var c in requirejs.s.contexts) { requirejs.s.contexts[c].nextTick = function(f){f()} } \nrequire(['css', '"+normalizeName+"', 'require'], function(css, normalize, require) { \n"+"var pathname = window.location.pathname.split('/'); \n"+"pathname.pop(); \n"+"pathname = pathname.join('/') + '/'; \n"+"var baseUrl = require.toUrl('.'); \n"+"baseUrl = normalize.convertURIBase(baseUrl, pathname, '/'); \n"+"css.inject(normalize('"+css+"', baseUrl, pathname)); \n"+"}); \n"+"for (var c in requirejs.s.contexts) { requirejs.s.contexts[c].nextTick = requirejs.nextTick; } \n")}_layerBuffer=[]},cssAPI});